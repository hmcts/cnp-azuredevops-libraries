parameters:
  environment: ''
  keyvaultName: ''
  serviceConnection: ''
  subscriptionIdVariableName: 'ARM_SUBSCRIPTION_ID'
  tenantIdVariableName: 'ARM_TENANT_ID'
  storageAccountVariableName: 'controlStorageAccount'
  keyVaultVariableName: 'controlKeyVault'
  envVariableName: 'env'
  buildRepoSuffix: ''
  component: ''

steps:

- task: AzureCLI@2
  displayName: Determine Key Vault and Storage names
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
    
      upperCaseEnv=$(echo "${{ parameters.environment }}" | tr "[:lower:]" "[:upper:]")

      component=$(echo "${{ parameters.component }}")

      echo COMPONENT: $component

      buildRepoSuffix=$(echo "${{ parameters.buildRepoSuffix }}")

      echo REPO: $buildRepoSuffix

      case "$buildRepoSuffix" in
          aks-cft-deploy)
                case "$component" in 
                  network)
                    SUB_ID=$(az account show --query id -o tsv)
                    ;;
                  *)
                    case "$upperCaseEnv" in
                        AAT)
                            SUB_ID=$(az account list --query "[?name=='DCD-CFTAPPS-STG'].id" -o tsv)
                            ;;
                        PERFTEST)
                            SUB_ID=$(az account list --query "[?name=='DCD-CFTAPPS-TEST'].id" -o tsv)
                            ;;
                        PREVIEW)
                            SUB_ID=$(az account list --query "[?name=='DCD-CFTAPPS-DEV'].id" -o tsv)
                            ;;
                        PTL)
                            SUB_ID=$(az account list --query "[?name=='DTS-CFTPTL-INTSVC'].id" -o tsv)
                            ;;
                        PTLSBOX)
                            SUB_ID=$(az account list --query "[?name=='DTS-CFTSBOX-INTSVC'].id" -o tsv)
                            ;;
                        *)
                            SUB_ID=$(az account list --query "[?name=='DCD-CFTAPPS-$upperCaseEnv'].id" -o tsv)
                            ;;
                    esac
                    ;;
                esac
                ;;
          aks-sds-deploy)
              case "$component" in 
                  network)
                    SUB_ID=$(az account show --query id -o tsv)
                    ;;
                  *)
                    case "$upperCaseEnv" in
                        PTL)
                            SUB_ID=$(az account list --query "[?name=='DTS-SHAREDSERVICESPTL'].id" -o tsv)
                            ;;
                        PTLSBOX)
                            SUB_ID=$(az account list --query "[?name=='DTS-SHAREDSERVICESPTL-SBOX'].id" -o tsv)
                            ;;
                        *)
                            SUB_ID=$(az account list --query "[?name=='DTS-SHAREDSERVICES-$upperCaseEnv'].id" -o tsv)
                            ;;
                    esac
                    ;;
                    *)
                    SUB_ID=$(az account show --query id -o tsv)
                    ;;
              esac
              ;;
      esac

      TENANT_ID=$(az account show --query tenantId -o tsv)

      SUB_NAME=$(az account list --query "[?id=='$SUB_ID'].name" -o tsv)

      echo SUB_NAME: $SUB_NAME

      echo SUB_ID: $SUB_ID
      echo "##vso[task.setvariable variable=${{ parameters.subscriptionIdVariableName }}]$SUB_ID"
      echo TENANT_ID: $TENANT_ID
      echo "##vso[task.setvariable variable=${{ parameters.tenantIdVariableName }}]$TENANT_ID"

      FIRST=$(echo $SUB_ID | cut -c 1-8)
      SECOND=$(echo $SUB_ID | cut -c 25-36)
      JOINT=c${FIRST}${SECOND}
      
      KEY_VAULT=${JOINT}kv
      STORAGE_ACCOUNT=${JOINT}sa

      echo KeyVault: $KEY_VAULT
      echo "##vso[task.setvariable variable=${{ parameters.keyVaultVariableName }}]$KEY_VAULT"
      echo Storage account: $STORAGE_ACCOUNT
      echo "##vso[task.setvariable variable=${{ parameters.storageAccountVariableName }}]$STORAGE_ACCOUNT"

      lowerCaseEnv=$(echo "${{ parameters.environment }}" | tr "[:upper:]" "[:lower:]")
      echo "##vso[task.setvariable variable="${{ parameters.envVariableName }}"]$lowerCaseEnv"
      echo Lower case env: $lowerCaseEnv
