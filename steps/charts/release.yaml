parameters:
  serviceConnection: "DCD-CFTAPPS-DEV"
  registryServiceConnection: "azurerm-prod"
  acrName: "hmctspublic"
  chartName: ""
  chartReleaseName: ""
  chartNamespace: ""
  chartPath: "./"
  helmVersion: "3.13.0"
  aksResourceGroup: ""
  aksCluster: ""
  clustersToCheck:
    - aksResourceGroupName: cft-preview-00-rg
      aksClusterName: cft-preview-00-aks
      aksEnvironment: preview
    - aksResourceGroupName: cft-preview-01-rg
      aksClusterName: cft-preview-01-aks
      aksEnvironment: preview
      
steps:

  - checkout: self
    clean: true
  
  - checkout: cnp-azuredevops-libraries
    clean: true

  - template: ../set-build-repo-suffix-env-var.yaml

  - task: HelmInstaller@1
    displayName: 'Install Helm ${{parameters.helmVersion}}'
    inputs:
      helmVersionToInstall: ${{parameters.helmVersion}}

  - ${{ if eq(parameters.aksCluster, '') }}:
    - ${{ each cluster in parameters.clustersToCheck}} :
      - task: AzureCLI@2
        displayName: "Checking if ${{ cluster.aksClusterName }} is Active"
        name: CheckActiveCluster_${{ replace(cluster.aksClusterName, '-', '_') }}
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: bash
          scriptPath: $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/auto-detect-cluster.sh
          scriptArguments: --resourceGroupName ${{ cluster.aksResourceGroupName }} --aksClusterName ${{ cluster.aksClusterName }} --environmentName ${{ cluster.aksEnvironment }}

  - task: AzureCLI@2
    displayName: "AKS Authenticate"
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptLocation: "inlineScript"
      scriptType: bash
      ${{ if ne(parameters.aksCluster, '') }}:
        inlineScript: az aks get-credentials --admin --resource-group ${{ parameters.aksResourceGroup }} --name ${{ parameters.aksCluster }}
      ${{ else }}:
        inlineScript: az aks get-credentials --admin --resource-group $(aksResourceGroup) --name $(aksCluster)

  - task: AzureCLI@1
    displayName: "Add custom charts repo"
    inputs:
      azureSubscription: ${{ parameters.registryServiceConnection }}
      scriptLocation: "inlineScript"
      scriptType: bash
      workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
      inlineScript: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo remove hmctspublic # workaround expired auth token
        helm repo add hmctspublic https://hmctspublic.azurecr.io/helm/v1/repo

  - ${{ if eq(parameters.chartPath, './') }}:
    - script: helm dependency update ${{ parameters.chartName }}
      workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
      displayName: "Retrieve helm dependencies (if any)"
  - ${{ else }}:
    - script: helm dependency update ${{ parameters.chartPath }}${{ parameters.chartName }}
      displayName: "Retrieve helm dependencies (if any)"

  - task: AzureCLI@2
    displayName: "Login to ACR"
    inputs:
      azureSubscription: ${{ parameters.registryServiceConnection }}
      scriptLocation: "inlineScript"
      scriptType: "bash"
      inlineScript: |
        az acr login --name ${{ parameters.acrName }}
        helm registry login ${{ parameters.acrName }}.azurecr.io --username 00000000-0000-0000-0000-000000000000 --password $TOKEN

  - task: AzureCLI@2
    displayName: "Helm Package"
    inputs:
      azureSubscription: ${{ parameters.registryServiceConnection }}
      scriptLocation: "inlineScript"
      scriptType: bash
      workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
      inlineScript: |
        rm -f $(ls ${{ parameters.chartPath }}${{ parameters.chartName }}-[0-9]*)
        echo "Building branch $(Build.SourceBranch)"
        tag=$(echo $(Build.SourceBranch) | cut -d'/' -f 3 | sed 's/v//')
        echo "publishing chart version $tag"
        helm package ${{ parameters.chartPath }}${{ parameters.chartName }} --version ${tag} --app-version ${tag}

  - task: AzureCLI@2
    displayName: "Helm Publish"
    inputs:
      azureSubscription: ${{ parameters.registryServiceConnection }}
      scriptLocation: "inlineScript"
      scriptType: bash
      workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
      inlineScript: |
        CHART_FILE=$(ls ${{ parameters.chartName }}-[0-9]*.tgz)
        helm repo add ${{ parameters.acrName }} https://${{ parameters.acrName }}.azurecr.io/helm/v1/repo || true
        helm push $CHART_FILE oci://${{ parameters.acrName }}.azurecr.io/helm/
