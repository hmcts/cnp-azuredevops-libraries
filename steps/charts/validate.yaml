parameters:
  serviceConnection: "DCD-CFTAPPS-DEV"
  registryServiceConnection: "azurerm-prod"
  acrName: "hmctspublic"
  chartName: ""
  chartReleaseName: ""
  chartNamespace: ""
  chartPath: "./"
  helmVersion: "3.8.0"
  helmInstallTimeout: "120"
  helmTestTimeout: "300"
  helmDeleteWait: "0"
  helmInstallWait: "0"
  valuesFile: "ci-values.yaml"
  additionalHelmArgs: ""
  # aksResourceGroup: ""
  # aksCluster: ""

steps:
  - checkout: self
    clean: true

  - task: HelmInstaller@1
    displayName: 'Install Helm ${{parameters.helmVersion}}'
    inputs:
      helmVersionToInstall: ${{parameters.helmVersion}}

  - task: AzureCLI@1
    displayName: "Determine Active Cluster"
    name: CheckActiveCluster
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptLocation: "inlineScript"
      inlineScript: |
        set -x
        az account set --subscription DCD-CFTAPPS-DEV

        check_pod_in_cluster() {
            local aks_rg=$1
            local aks_cluster=$2
            printf "\n\nTrying cluster $aks_cluster $aks_rg\n"
            az aks get-credentials \
                --resource-group "$aks_rg" \
                --name "$aks_cluster" --admin
            local pod_exists
            pod_exists=$(kubectl get pods --context "$aks_cluster-admin" -n admin -o jsonpath='{range .items[*]}{@.metadata.name}{"\t"}{@.spec.containers[0].args}{"\n"}{end}' | grep "external-dns-private" | grep -- "--txt-owner-id=preview-active")
            if [ -n "$pod_exists" ]; then
                aksResourceGroup="$aks_rg"
                aksCluster="$aks_cluster"
                return 0
            else
                echo "Pod with the specified argument not found in cluster $aks_cluster."
                return 1
            fi
        }
        if aks_name=="${{ parameters.aksCluster }}" 
        then
          aks_resource_group="${{ parameters.aksResourceGroup }}"
          echo "##vso[task.setvariable variable=aksResourceGroup;isOutput=true]${{ parameters.aksResourceGroup }}"
          echo "##vso[task.setvariable variable=aksCluster;isOutput=true]${{ parameters.aksCluster }}"
        else
          aks_resource_group="cft-preview-00-rg"
          aks_name="cft-preview-00-aks"
          if check_pod_in_cluster "$aks_resource_group" "$aks_name"; then
              echo "Pod with the specified argument found in cluster $aks_name."
          else
              aks_resource_group="cft-preview-01-rg"
              aks_name="cft-preview-01-aks"
              if check_pod_in_cluster "$aks_resource_group" "$aks_name"; then
                  echo "Pod with the specified argument found in cluster $aks_name."
              else
                  echo "Pod with the specified argument not found in any clusters."
                  echo "##vso[task.complete result=Failed;]Pod not found in any clusters."
              fi
          fi
          echo "##vso[task.setvariable variable=aksResourceGroup;isOutput=true]$aksResourceGroup"
          echo "##vso[task.setvariable variable=aksCluster;isOutput=true]$aksCluster"
        fi

  - task: AzureCLI@1
    displayName: "AKS Authenticate"
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptLocation: "inlineScript"
      inlineScript: |
        if aks_name=="${{ parameters.aksCluster }}" 
        then
          az account set --subscription DCD-CFTAPPS-SBOX
        fi
        az aks get-credentials --admin --resource-group $(CheckActiveCluster.aksResourceGroup) --name $(CheckActiveCluster.aksCluster)

  - task: AzureCLI@1
    displayName: "Add custom charts repo"
    inputs:
      azureSubscription: ${{ parameters.registryServiceConnection }}
      scriptLocation: "inlineScript"
      inlineScript: |
        helm repo remove hmctspublic #Â workaround expired auth token
        helm repo add hmctspublic https://hmctspublic.azurecr.io/helm/v1/repo 

  - script: helm dependency update ${{ parameters.chartPath }}${{ parameters.chartName }}
    displayName: "Retrieve helm dependencies (if any)"

  - script: helm delete --namespace ${{ parameters.chartNamespace }} ${{ parameters.chartReleaseName }} || true
    displayName: "Delete Previous Test Chart"

  - script: sleep ${{ parameters.helmDeleteWait }}
    displayName: "Wait for previous chart resources to be deprovisioned"

  - script: |
      ls -Rla ${{ parameters.chartPath }}${{ parameters.chartName }}
      helm lint ${{ parameters.chartPath }}${{ parameters.chartName }}
    displayName: "Helm Lint"

  - script: helm install ${{ parameters.chartReleaseName }} ${{ parameters.chartPath }}${{ parameters.chartName }} --namespace ${{ parameters.chartNamespace }} -f ${{ parameters.valuesFile }} --wait --timeout ${{ parameters.helmInstallTimeout }}s ${{ parameters.additionalHelmArgs }}
    displayName: "Helm Install"

  - script: sleep ${{ parameters.helmInstallWait }}
    displayName: "Wait for chart resources to be provisioned"

  - script: helm test --namespace ${{ parameters.chartNamespace }} ${{ parameters.chartReleaseName }} --logs --timeout ${{ parameters.helmTestTimeout }}s
    displayName: "Helm Test"

  - script: helm delete --namespace ${{ parameters.chartNamespace }} ${{ parameters.chartReleaseName }}
    displayName: "Delete test Chart"
