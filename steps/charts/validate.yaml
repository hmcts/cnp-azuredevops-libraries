parameters:
  serviceConnection: "DCD-CFTAPPS-DEV"
  registryServiceConnection: "azurerm-prod"
  acrName: "hmctspublic"
  chartName: ""
  chartReleaseName: ""
  chartNamespace: ""
  chartPath: "./"
  helmVersion: "3.13.0"
  helmInstallTimeout: "120"
  helmTestTimeout: "300"
  helmDeleteWait: "0"
  helmInstallWait: "0"
  valuesFile: "ci-values.yaml"
  additionalHelmArgs: ""
  aksResourceGroup: ""
  aksCluster: ""
  clustersToCheck:
    - aksResourceGroupName: cft-preview-00-rg
      aksClusterName: cft-preview-00-aks
      aksEnvironment: preview
    - aksResourceGroupName: cft-preview-01-rg
      aksClusterName: cft-preview-01-aks
      aksEnvironment: preview

steps:
  
  - checkout: self
    clean: true

  - checkout: cnp-azuredevops-libraries
    clean: true

  - template: ../set-build-repo-suffix-env-var.yaml

  - task: HelmInstaller@1
    displayName: 'Install Helm ${{parameters.helmVersion}}'
    inputs:
      helmVersionToInstall: ${{parameters.helmVersion}}

  - ${{ if eq(parameters.aksCluster, '') }}:
    - ${{ each cluster in parameters.clustersToCheck}} :
      - task: AzureCLI@2
        displayName: "Checking if ${{ cluster.aksClusterName }} is Active"
        name: CheckActiveCluster_${{ replace(cluster.aksClusterName, '-', '_') }}
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: bash
          scriptPath: $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/auto-detect-cluster.sh
          scriptArguments: -r ${{ cluster.aksResourceGroupName }} -k ${{ cluster.aksClusterName }} -e ${{ cluster.aksEnvironment }}

  - task: AzureCLI@2
    displayName: "AKS Authenticate"
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptLocation: "inlineScript"
      scriptType: bash
      ${{ if ne(parameters.aksCluster, '') }}:
        inlineScript: az aks get-credentials --admin --resource-group ${{ parameters.aksResourceGroup }} --name ${{ parameters.aksCluster }}
      ${{ else }}:
        inlineScript: az aks get-credentials --admin --resource-group $(aksResourceGroup) --name $(aksCluster)

  - task: AzureCLI@1
    displayName: "Add custom charts repo"
    inputs:
      azureSubscription: ${{ parameters.registryServiceConnection }}
      scriptLocation: "inlineScript"
      scriptType: bash
      workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
      inlineScript: |
        helm repo remove hmctspublic # workaround expired auth token
        helm repo add hmctspublic https://hmctspublic.azurecr.io/helm/v1/repo 

  - script: helm dependency update ${{ parameters.chartPath }}${{ parameters.chartName }}
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Retrieve helm dependencies (if any)"

  - script: helm delete --namespace ${{ parameters.chartNamespace }} ${{ parameters.chartReleaseName }} || true
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Delete Previous Test Chart"

  - script: sleep ${{ parameters.helmDeleteWait }}
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Wait for previous chart resources to be deprovisioned"

  - script: |
      ls -Rla ${{ parameters.chartPath }}${{ parameters.chartName }}
      helm lint ${{ parameters.chartPath }}${{ parameters.chartName }}
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Helm Lint"

  - script: helm install ${{ parameters.chartReleaseName }} ${{ parameters.chartPath }}${{ parameters.chartName }} --namespace ${{ parameters.chartNamespace }} -f ${{ parameters.valuesFile }} --wait --timeout ${{ parameters.helmInstallTimeout }}s ${{ parameters.additionalHelmArgs }}
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Helm Install"

  - script: sleep ${{ parameters.helmInstallWait }}
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Wait for chart resources to be provisioned"

  - script: helm test --namespace ${{ parameters.chartNamespace }} ${{ parameters.chartReleaseName }} --logs --timeout ${{ parameters.helmTestTimeout }}s
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Helm Test"

  - script: helm delete --namespace ${{ parameters.chartNamespace }} ${{ parameters.chartReleaseName }}
    workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)
    displayName: "Delete test Chart"
