parameters:
  - name: keyvaultName
    default: ''

  - name: keyvaultSecret
    default: ''

  - name: location
    default: 'UK South'
    values:
      - 'UK South'
      - 'UK West'

  - name: serviceConnection
    default: ''

  - name: overrideAction
    default: apply

  - name: forcePreventParallelJobRun
    displayName: Always force prevent parallem run job
    type: boolean
    default: false

  - name: kvConnectedServiceName
    default: 'azurerm-sandbox'

  - name: projectName
    default: 'ss'

  - name: cluster
    default: '00'

  - name: environment
    default: 'sbox'

  - name: runManualStart
    type: boolean
    default: false

  - name: baseDirectory
    default: ''

steps:
  - checkout: self
  - checkout: cnp-azuredevops-libraries
  - template: ./set-build-repo-suffix-env-var.yaml

  - template: ./install-use-tfswitch.yaml
    parameters:
      tfswitchArgs: -b ~/.local/bin/terraform --latest
      workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)

  - task: AzureKeyVault@2
    displayName: 'Retrieve keyvault secret for ADO token'
    inputs:
      ConnectedServiceName: ${{ parameters.serviceConnection }}
      keyVaultName: ${{ parameters.keyvaultName }}
      secretsFilter: ${{ parameters.keyvaultSecret }}
      runAsPreJob: false

  - task: AzureKeyVault@2
    displayName: 'Get GitHub API token from Keyvault'
    inputs:
      runAsPreJob: false
      ConnectedServiceName: ${{ parameters.kvConnectedServiceName }}
      keyVaultName: 'infra-vault-nonprod'
      secretsFilter: 'github-api-token'

  - task: AzureCLI@2
    displayName: Trigger Github Action AKS Manual Start
    inputs:
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptType: 'bash'
      scriptLocation: 'scriptPath'
      scriptPath: $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/trigger-manual-deploy.sh
      arguments: "$(github-api-token) ${{parameters.projectName}} ${{parameters.environment}} ${{parameters.cluster}}"
    condition: ${{ eq(parameters.runManualStart, true) }}

  - task: PowerShell@2
    displayName: Run PESTER tests
    inputs:
      targetType: 'filePath'
      filePath: $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/pester-tests.ps1
      pwsh: true

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/TEST-*.xml'
    inputs:
      testResultsFormat: NUnit
      failTaskOnFailedTests: true
    condition: always()

  - task: Bash@3
    displayName: Getting SP bearer token
    inputs:
      targetType: 'inline'
      script: |
        SPTOKEN=$(curl -X POST -H "Content-Type: application/x-www-form-urlencoded" -d 'client_id=10936009-a112-4733-bb2a-94ee240b79ff&scope=499b84ac-1321-427f-aa17-267ca6975798/.default&client_secret=$(azure-devops-sp-token)&grant_type=client_credentials' 'https://login.microsoftonline.com/531ff96d-0ae9-462a-8d2d-bec7c0b42082/oauth2/v2.0/token' | jq -r '.access_token')
        echo "##vso[task.setvariable variable=SPTOKEN;]$SPTOKEN"
        
  - task: Bash@3
    displayName: Prevent parallel run
    # Run step if (not a plan and is manually triggered) or (branch is main and is auto triggered)
    condition: |
      and(succeeded(),
        or(
            eq(${{ parameters.forcePreventParallelJobRun }}, true),
            and(
                ne('${{ parameters.overrideAction }}', 'plan'),
                eq(variables['isAutoTriggered'], false)
            ),
            and(
                eq(variables['isAutoTriggered'], true),
                eq(variables['isMain'], true)
            )
        )
      )
    env:
      thisbuild: $(Build.BuildId)
      pipelinedefinition: $(System.DefinitionId)
      azuredevopstoken: $(SPTOKEN)
    inputs:
      targetType: inline
      script: |
        set -x
        python3 $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/ado-build-check.py \
        --pat "$(SPTOKEN)" \
        --buildid "$(Build.BuildId)" \
        --organization "hmcts" \
        --project "$(System.TeamProject)" \
        --pipelineid "$(System.DefinitionId)"

  - template: ./terraform-version-checker.yaml
    parameters:
      kvConnectedServiceName: ${{ parameters.kvConnectedServiceName }}
      baseDirectory: ${{ parameters.baseDirectory }}
