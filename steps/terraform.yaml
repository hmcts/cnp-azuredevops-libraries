parameters:
  - name: initCommandOptions
    default: ''

  - name: planCommandOptions
    default: ''

  - name: applyCommandOptions
    default: ''

  - name: destroyCommandOptions
    default: ''

  - name: environment
    default: sandbox

  - name: location
    default: 'UK South'
    values:
      - 'UK South'
      - 'UK West'

  - name: overrideAction
    default: plan
    values:
      - plan
      - apply
      - destroy

  - name: product
    default: ''

  - name: component
    default: ''

  - name: serviceConnection
    default: ''

  - name: terraformInitSubscription
    default: ''

  - name: backendAzureRmKey
    default: ''

steps:
  - checkout: self
  - checkout: cnp-azuredevops-libraries
  - bash: echo ${{ parameters.environment }}

  - template: ./set-build-repo-suffix-env-var.yaml
  - template: ./keyvault-read.yaml
    parameters:
      serviceConnection: ${{ parameters.serviceConnection }}
      environment: ${{ parameters.environment }}

  - task: Bash@3
    displayName: Terraform install (tfenv)
    inputs:
      filePath: $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/tfenv-install-terraform.sh
      workingDirectory: $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)

  - task: TerraformCLI@0
    displayName: Terraform init ${{ parameters.component }}
    inputs:
      command: init
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
      backendType: azurerm
      ensureBackend: false
      backendServiceArm: ${{ parameters.serviceConnection }}
      ${{ if eq(parameters['environment'], 'ptl') }}:
        backendAzureRmResourceGroupName: "azure-control-prod-rg"
      ${{ if ne(parameters['environment'], 'ptl') }}:
        backendAzureRmResourceGroupName: 'azure-control-${{ parameters.environment }}-rg'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}
      backendAzureRmStorageAccountName: $(controlStorageAccount)
      backendAzureRmStorageAccountSku: Standard_LRS
      backendAzureRmContainerName: subscription-tfstate
      backendAzureRmKey: '${{ parameters.location }}/${{ parameters.product }}/$(buildRepoSuffix)/${{ parameters.environment }}/${{ parameters.component }}/terraform.tfstate'
      commandOptions: '-backend-config=subscription_id=${{ parameters.terraformInitSubscription }} ${{ parameters.initCommandOptions }}'

  - task: TerraformCLI@0
    displayName: Terraform validate
    inputs:
      command: validate
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'

  - task: TerraformCLI@0
    displayName: Terraform plan ${{ parameters.component }}
    condition: and(succeeded(), in('${{ parameters.overrideAction }}', 'plan', 'apply'))
    inputs:
      command: plan
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
      environmentServiceName: ${{ parameters.serviceConnection }}
      runAzLogin: true
      commandOptions: >
        -var env=${{ parameters.environment }}
        -var builtFrom=$(Build.Repository.Name)
        -var product=${{ parameters.product }} ${{ parameters.planCommandOptions }}
        -var-file $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/${{ parameters.environment }}/${{ parameters.environment }}.tfvars
        -refresh=false
        -input=false
        -out tfplan-${{ parameters.environment }}-${{ parameters.component }}
        -no-color
        -detailed-exitcode
      publishPlanResults: 'tfplan-${{ parameters.environment }}-${{ parameters.component }}'

  - task: AzureKeyVault@1
    displayName: 'Get GitHub API token from Keyvault'
    inputs:
      runAsPreJob: false
      ConnectedServiceName: 'azurerm-sandbox'
      keyVaultName: 'infra-vault-nonprod'
      secretsFilter: 'github-api-token'

  - task: PowerShell@2
    displayName: Post Plan to Github
    condition:  and(succeeded(), in('${{ parameters.overrideAction }}', 'plan', 'apply'))
    env:
      GITHUB_OAUTH: $(github-api-token)
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/add-pr-comment.ps1
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
      script: |
        terraform show -json tfplan-${{ parameters.environment }}-${{ parameters.component }} -no-color | jq '.' > tf.json
      pwsh: true
      arguments: "-repo $env:$(Build.Repository.Name) -pr $env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER -buildId $env:BUILD_BUILDID -token $env:GITHUB_OAUTH -inputFile tf.json -stageName $env:SYSTEM_STAGENAME -exitCode $(TERRAFORM_LAST_EXITCODE) -environment ${{ parameters.environment}} -isPlan"

  - task: Bash@3
    displayName: Checkov Scan
    condition: and(succeeded(), in('${{ parameters.overrideAction }}', 'plan', 'apply'))
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
      targetType: inline
      script: |
        #This the recommendation from the checkov gang for user friendly output. Alas it doesn't quite seem to work, so displaying the plan for reference in the task below not sure how useful this will be
        terraform show -json tfplan-${{ parameters.environment }}-${{ parameters.component }} -no-color | jq '.' > tf.json
        docker run --tty --volume `pwd`:/tf bridgecrew/checkov -f /tf/tf.json -o junitxml > $SYSTEM_STAGENAME.xml
        #There are some trailing ascii colour codes that the sed script gets rid of
        sed -i 's/\x1b\[[0-9;]*m//g' $SYSTEM_STAGENAME.xml

  - task: Bash@3
    displayName: Checkov Scan - Display Plan
    condition: and(succeeded(), in('${{ parameters.overrideAction }}', 'plan', 'apply'))
    inputs:
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
      targetType: inline
      script: |
        #checkov should provide more info about what is actually going on but it seems that I can only get it to show the lines of the plan so displaying it here for reference.
        cat -n tf.json

  - task: PublishTestResults@2
    displayName: Publish Checkov Scan Results
    condition: and(succeeded(), in('${{ parameters.overrideAction }}', 'plan', 'apply'))
    inputs:
        testResultsFormat: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
        testResultsFiles: '*.xml'
        failTaskOnFailedTests: false

  - task: PowerShell@2
    displayName: Post Scan Results to Github
    condition: and(succeeded(), in('${{ parameters.overrideAction }}', 'plan', 'apply'))
    env:
      GITHUB_OAUTH: $(github-api-token)
    inputs:
      targetType: filePath
      filePath: $(System.DefaultWorkingDirectory)/staff-infrastructure-alz-templates/scripts/AddGitHubPrComment.ps1
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
      pwsh: true
      arguments: "-repo $env:$(Build.Repository.Name) -pr $env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER -buildId $env:BUILD_BUILDID -token $env:GITHUB_OAUTH -inputFile $env:SYSTEM_STAGENAME -stageName $env:SYSTEM_STAGENAME -exitCode $(TERRAFORM_LAST_EXITCODE) -environment ${{ parameters.environment}} -isPlan"

  - task: TerraformCLI@0
    displayName: Terraform apply ${{ parameters.component }}
    condition: |
      or(
      and(succeeded(), eq(variables['isMain'], true), eq('${{ parameters.overrideAction }}', 'apply')),
      and(succeeded(), eq(variables['isMain'], true), eq(variables['isAutoTriggered'], true))
      )
    inputs:
      command: apply
      workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
      environmentServiceName: ${{ parameters.serviceConnection }}
      commandOptions: '--auto-approve tfplan-${{ parameters.environment }}-${{ parameters.component }} ${{ parameters.applyCommandOptions }}'

  - ${{ if eq(parameters.overrideAction, 'destroy') }}:
      - task: TerraformCLI@0
        displayName: Terraform destroy ${{ parameters.component }}
        condition: and(succeeded(), eq(variables['isMain'], true), eq('${{ parameters.overrideAction }}', 'destroy'))
        inputs:
          command: destroy
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/components/${{ parameters.component }}'
          environmentServiceName: ${{ parameters.serviceConnection }}
          commandOptions: >
            -var env=${{ parameters.environment }}
            -var builtFrom=$(Build.Repository.Name)
            -var product=${{ parameters.product }} ${{ parameters.destroyCommandOptions }}
            -var-file $(System.DefaultWorkingDirectory)/$(buildRepoSuffix)/environments/${{ parameters.environment }}/${{ parameters.environment }}.tfvars

  - task: AzureCLI@2
    displayName: 'Unlock TF state if required'
    condition: always()
    inputs:
      scriptType: bash
      scriptLocation: scriptPath
      azureSubscription: ${{ parameters.serviceConnection }}
      scriptPath: $(System.DefaultWorkingDirectory)/cnp-azuredevops-libraries/scripts/unlock-tf-state.sh
      arguments: $(controlStorageAccount) "${{ parameters.location }}/${{ parameters.product }}/$(buildRepoSuffix)/${{ parameters.environment }}/${{ parameters.component }}/terraform.tfstate"
